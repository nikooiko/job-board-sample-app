version: "3.9"

x-svc-url-variables: &svc-url-variables
  - JOBS_SVC_ROOT_URL: "http://jobs:4000"
  - SEARCH_SVC_ROOT_URL: "http://search:4001"
  - ELASTICSEARCH_NODE: "http://elasticsearch:9200"
  - REDIS_HOST: "redis"

services:
  gateway:
    depends_on:
      - jobs
      - redis
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
      args:
        SERVICE_NAME: gateway
    env_file:
      - .env
    environment:
      <<: *svc-url-variables
      SERVICE_NAME: gateway
    ports:
      - "3000:3000"
    volumes:
      - ./apps/gateway:/node/apps/gateway:cached
      - ./libs:/node/libs:cached
    networks:
      app_net:
  jobs:
    depends_on:
      - search
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
      args:
        SERVICE_NAME: jobs
    env_file:
      - .env
    environment:
      <<: *svc-url-variables
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/job-board-sample-app?schema=jobs"
      SERVICE_NAME: jobs
    volumes:
      - ./apps/jobs:/node/apps/jobs:cached
      - ./libs:/node/libs:cached
    networks:
      app_net:
  search:
    depends_on:
      - elasticsearch
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
      args:
        SERVICE_NAME: search
    env_file:
      - .env
    environment:
      <<: *svc-url-variables
      SERVICE_NAME: search
    volumes:
      - ./apps/search:/node/apps/search:cached
      - ./libs:/node/libs:cached
    networks:
      app_net:
  postgres:
    image: "postgres:15.1"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      app_net:
  redis:
    image: "redis:7.0.8"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      app_net:
  elasticsearch_setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
    volumes:
      - certs_data:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
    depends_on:
      elasticsearch_setup:
        condition: service_healthy
    volumes:
      - certs_data:/usr/share/elasticsearch/config/certs
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app_net
    ports:
      - ${ES_PORT}:9200
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - discovery.type=single-node
      - xpack.security.enabled=false
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

volumes:
  certs_data:
  postgres_data:
  redis_data:
  elasticsearch_data:

networks:
  app_net:
